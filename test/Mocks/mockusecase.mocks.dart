// Mocks generated by Mockito 5.4.4 from annotations
// in task_async/test/Mocks/mockusecase.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i6;
import 'package:task_async/Domain/Entities/Taskentity.dart' as _i3;
import 'package:task_async/Domain/Repository/Taskrepository.dart' as _i2;
import 'package:task_async/Domain/Usecases/Taskusecase.dart' as _i4;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeTaskrepository_0 extends _i1.SmartFake
    implements _i2.Taskrepository {
  _FakeTaskrepository_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeTaskentity_1 extends _i1.SmartFake implements _i3.Taskentity {
  _FakeTaskentity_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [Taskusecase].
///
/// See the documentation for Mockito's code generation for more information.
class MockTaskusecase extends _i1.Mock implements _i4.Taskusecase {
  MockTaskusecase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.Taskrepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeTaskrepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.Taskrepository);

  @override
  _i5.Future<List<_i3.Taskentity>> gettasks() => (super.noSuchMethod(
        Invocation.method(
          #gettasks,
          [],
        ),
        returnValue: _i5.Future<List<_i3.Taskentity>>.value(<_i3.Taskentity>[]),
      ) as _i5.Future<List<_i3.Taskentity>>);

  @override
  _i5.Future<_i3.Taskentity> addtask(_i3.Taskentity? newtask) =>
      (super.noSuchMethod(
        Invocation.method(
          #addtask,
          [newtask],
        ),
        returnValue: _i5.Future<_i3.Taskentity>.value(_FakeTaskentity_1(
          this,
          Invocation.method(
            #addtask,
            [newtask],
          ),
        )),
      ) as _i5.Future<_i3.Taskentity>);

  @override
  _i5.Future<_i3.Taskentity> updatetask(_i3.Taskentity? updatedtask) =>
      (super.noSuchMethod(
        Invocation.method(
          #updatetask,
          [updatedtask],
        ),
        returnValue: _i5.Future<_i3.Taskentity>.value(_FakeTaskentity_1(
          this,
          Invocation.method(
            #updatetask,
            [updatedtask],
          ),
        )),
      ) as _i5.Future<_i3.Taskentity>);

  @override
  _i5.Future<String> deletetask(int? id) => (super.noSuchMethod(
        Invocation.method(
          #deletetask,
          [id],
        ),
        returnValue: _i5.Future<String>.value(_i6.dummyValue<String>(
          this,
          Invocation.method(
            #deletetask,
            [id],
          ),
        )),
      ) as _i5.Future<String>);
}
